import{S as a,i as e,s as t,k as i,e as l,t as r,j as s,L as n,d as o,n as h,c,a as m,g as d,m as u,b as p,f as g,F as f,o as w,G as v,x as y,u as b,v as k}from"../../../chunks/vendor-33ac96d6.js";import{D as E}from"../../../chunks/date-fb86eb85.js";/* empty css                                                         */function $(a){let e,t,$,A,I,j,L,x,z,Z,P,R,H,M,q,C,N,S,U,W,D,F,G,_,B,J,K,O,Q,T,V,X,Y,aa,ea,ta,ia,la,ra,sa,na,oa,ha,ca,ma,da,ua,pa,ga,fa,wa,va,ya;return O=new E({props:{date:"08/07/21"}}),ea=new E({props:{date:"08/07/21"}}),{c(){e=i(),t=l("h1"),$=l("a"),A=r("projects"),I=l("small"),j=r(" • iz"),L=i(),x=l("h2"),z=r("table of contents"),Z=i(),P=l("ul"),R=l("li"),H=l("a"),M=r("about"),q=i(),C=l("li"),N=l("a"),S=r("links"),U=i(),W=l("li"),D=l("a"),F=r("docs"),G=i(),_=l("h3"),B=r("about"),J=i(),K=l("p"),s(O.$$.fragment),Q=r(" A cli utility, built in Zig, which will serve to help me (and anybody else who might find it useful!) to manage day-to-date personal data management, logging, and automation tasks -- especially related to health data, and more specifically, with an initial focus on type 1 diabetes health data. Primarily serves to bolster my knowledge of data structures and algorithms at a lower level than Rust (no dependencies), learn the Zig programming language which I am currently very taken with, and develop a prototype framework for certain design decisions and functionality that will be implemented in certain larger-scope projects down the line. Also experimenting with the wasm32-wasi compilation target included with the Zig compiler, with the result published to "),T=l("a"),V=r("WAPM"),X=r("."),Y=i(),aa=l("p"),s(ea.$$.fragment),ta=r(" I'm also implementing the same CLI utility in the Nim programming language (which I'm also coming to like quite a bit) in parallel with the Zig implementation (and also doing a parallel implementation in Rust). All will have manual data structure implementations (in Rust through "),ia=l("a"),la=r("recollection"),ra=r("), which will primarily serve to, again, bolster my knowledge of data structures & algorithms, and is also just a fun exercise in general."),sa=i(),na=l("h3"),oa=r("links"),ha=i(),ca=l("ul"),ma=l("li"),da=l("a"),ua=r("wapm.io"),pa=i(),ga=l("li"),fa=l("a"),wa=r("github"),va=r(" (iz)"),this.h()},l(a){n('[data-svelte="svelte-y2jure"]',document.head).forEach(o),e=h(a),t=c(a,"H1",{id:!0});var i=m(t);$=c(i,"A",{href:!0,class:!0});var l=m($);A=d(l,"projects"),l.forEach(o),I=c(i,"SMALL",{class:!0});var r=m(I);j=d(r," • iz"),r.forEach(o),i.forEach(o),L=h(a),x=c(a,"H2",{});var s=m(x);z=d(s,"table of contents"),s.forEach(o),Z=h(a),P=c(a,"UL",{});var p=m(P);R=c(p,"LI",{});var g=m(R);H=c(g,"A",{class:!0,href:!0});var f=m(H);M=d(f,"about"),f.forEach(o),q=h(g),g.forEach(o),C=c(p,"LI",{});var w=m(C);N=c(w,"A",{class:!0,href:!0});var v=m(N);S=d(v,"links"),v.forEach(o),U=h(w),w.forEach(o),W=c(p,"LI",{});var y=m(W);D=c(y,"A",{class:!0,href:!0});var b=m(D);F=d(b,"docs"),b.forEach(o),y.forEach(o),p.forEach(o),G=h(a),_=c(a,"H3",{id:!0});var k=m(_);B=d(k,"about"),k.forEach(o),J=h(a),K=c(a,"P",{});var E=m(K);u(O.$$.fragment,E),Q=d(E," A cli utility, built in Zig, which will serve to help me (and anybody else who might find it useful!) to manage day-to-date personal data management, logging, and automation tasks -- especially related to health data, and more specifically, with an initial focus on type 1 diabetes health data. Primarily serves to bolster my knowledge of data structures and algorithms at a lower level than Rust (no dependencies), learn the Zig programming language which I am currently very taken with, and develop a prototype framework for certain design decisions and functionality that will be implemented in certain larger-scope projects down the line. Also experimenting with the wasm32-wasi compilation target included with the Zig compiler, with the result published to "),T=c(E,"A",{href:!0});var ya=m(T);V=d(ya,"WAPM"),ya.forEach(o),X=d(E,"."),E.forEach(o),Y=h(a),aa=c(a,"P",{});var ba=m(aa);u(ea.$$.fragment,ba),ta=d(ba," I'm also implementing the same CLI utility in the Nim programming language (which I'm also coming to like quite a bit) in parallel with the Zig implementation (and also doing a parallel implementation in Rust). All will have manual data structure implementations (in Rust through "),ia=c(ba,"A",{href:!0});var ka=m(ia);la=d(ka,"recollection"),ka.forEach(o),ra=d(ba,"), which will primarily serve to, again, bolster my knowledge of data structures & algorithms, and is also just a fun exercise in general."),ba.forEach(o),sa=h(a),na=c(a,"H3",{id:!0});var Ea=m(na);oa=d(Ea,"links"),Ea.forEach(o),ha=h(a),ca=c(a,"UL",{});var $a=m(ca);ma=c($a,"LI",{});var Aa=m(ma);da=c(Aa,"A",{class:!0,href:!0});var Ia=m(da);ua=d(Ia,"wapm.io"),Ia.forEach(o),Aa.forEach(o),pa=h($a),ga=c($a,"LI",{});var ja=m(ga);fa=c(ja,"A",{class:!0,href:!0});var La=m(fa);wa=d(La,"github"),La.forEach(o),va=d(ja," (iz)"),ja.forEach(o),$a.forEach(o),this.h()},h(){document.title="iz • clp.is",p($,"href","/p"),p($,"class","crumb svelte-1d7rk9a"),p(I,"class","p svelte-1d7rk9a"),p(t,"id","head"),p(H,"class","link"),p(H,"href","#about"),p(N,"class","link"),p(N,"href","#links"),p(D,"class","link"),p(D,"href","/p/iz/docs"),p(_,"id","about"),p(T,"href","https://wapm.io/package/clpi/iz"),p(ia,"href","/p/recollection"),p(na,"id","links"),p(da,"class","link ext"),p(da,"href","https://wapm.io/package/clpi/iz"),p(fa,"class","link ext"),p(fa,"href","https://github.com/clpi/recollection")},m(a,i){g(a,e,i),g(a,t,i),f(t,$),f($,A),f(t,I),f(I,j),g(a,L,i),g(a,x,i),f(x,z),g(a,Z,i),g(a,P,i),f(P,R),f(R,H),f(H,M),f(R,q),f(P,C),f(C,N),f(N,S),f(C,U),f(P,W),f(W,D),f(D,F),g(a,G,i),g(a,_,i),f(_,B),g(a,J,i),g(a,K,i),w(O,K,null),f(K,Q),f(K,T),f(T,V),f(K,X),g(a,Y,i),g(a,aa,i),w(ea,aa,null),f(aa,ta),f(aa,ia),f(ia,la),f(aa,ra),g(a,sa,i),g(a,na,i),f(na,oa),g(a,ha,i),g(a,ca,i),f(ca,ma),f(ma,da),f(da,ua),f(ca,pa),f(ca,ga),f(ga,fa),f(fa,wa),f(ga,va),ya=!0},p:v,i(a){ya||(y(O.$$.fragment,a),y(ea.$$.fragment,a),ya=!0)},o(a){b(O.$$.fragment,a),b(ea.$$.fragment,a),ya=!1},d(a){a&&o(e),a&&o(t),a&&o(L),a&&o(x),a&&o(Z),a&&o(P),a&&o(G),a&&o(_),a&&o(J),a&&o(K),k(O),a&&o(Y),a&&o(aa),k(ea),a&&o(sa),a&&o(na),a&&o(ha),a&&o(ca)}}}const A=!1,I=!0;function j(a,e,t){let{title:i="projets"}=e;return a.$$set=a=>{"title"in a&&t(0,i=a.title)},[i]}class L extends a{constructor(a){super(),e(this,a,j,$,t,{title:0})}}export{L as default,A as hydrate,I as prerender};
